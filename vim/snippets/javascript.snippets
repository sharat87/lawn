# TODO marks
snippet to
	// TODO: ${1:message}
snippet fm
	// FIXME: ${1:message}
snippet xx
	// XXX: ${1:message}
snippet cl
	console.log('${1:break 1}');${2}
snippet ci
	console.info('${1:break 1}');${2}
snippet cw
	console.warn('${1:break 1}');${2}
snippet ce
	console.error('${1:break 1}');${2}
snippet cg
	console.group('${1:break 1}');${2}
snippet cge
	console.groupEnd();
snippet civ
	console.info('${2:value of $1}', ${1:varname});${3}
# variable th set to $(this) > for jQuery
snippet th
	var ${1:th} = $(this);${2}
# Prototype
snippet pf
	${1:class}.prototype.${2:method} = function (${3:argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:name}(${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
snippet f
	function (${1}) {
		${2:// body...}
	}
# Object Method
snippet :f
	${1:method}: function (${2:argument}) {
		${4:// body...}
	},
# if
snippet if
	if(${1:condition}) {
		${2}
	}
# if ... else
snippet ife
	if(${1:condition}) {
		${2}
	} else {
		${3}
	}
# tertiary conditional
snippet t
	(${1:condition} ? ${2:true} : ${3:false})
# switch
snippet sw
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet cs
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for(var ${2:i} = 0; $2 < ${1:len}; $2${3:++}) {
		${4:$1[$2]}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for(var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	}
# while (...) {...}
snippet wh
	while(${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Array iteration
snippet ai
	var ${1:len} = ${2:things}.length, ${3:i} = 0;
	while($3 < $1) {
		var ${4:thing} = $2[$3++];
		${5}
	}
# setTimeout function
snippet stt
	setTimeout( function () { ${3} }, ${1:1000});
# setInterval function
snippet sti
	setInterval( function () { ${3} }, ${1:1000});
