" Author: Shrikant Sharat Kandula <shrikantsharat.k@gmail.com>
" Used On: (G)Vim 7.3 and 7.2 on Ubuntu Natty(current), Maverick, Karmic and Lucid, and Windows 7
" Modeline: vim: set ft=vim et sts=4 ts=8 sw=4 fdm=marker :

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Utilities {{{

" Find out if we are on windows.
let s:is_windows = has("win16") || has("win32") || has("win64")

" Define the VIMFILES directory, if not already done.
if !exists('$VIMFILES')
    if s:is_windows
        let $VIMFILES = 'C:/tools/Vim/vimfiles'
    else
        let $VIMFILES = $HOME . '/.vim'
    endif
endif

" Define my lawn's temp directory.
if !exists('$LAWN_TMP')
    let $LAWN_TMP = $HOME . '/lawn/tmp'
endif

" Is vimrc running for the first time. e.g., not run with `source`
let s:first_time = !exists('g:vimrc_done')
let g:vimrc_done = 1

" Load Vundle.
set rtp+=$VIMFILES/vundle
call vundle#rc('$HOME/.vim/plugins')

set path=./**

" }}}

" Settings {{{

if has('gui_running') && s:first_time

    if s:is_windows
        set guifont=Consolas:h14:cANSI
    else
        set guifont=Monaco\ 14
    endif

    set guioptions+=b " enable horizontal scrollbar
    set guioptions-=T " remove toolbar
    set guioptions-=t " remove tearoff from menus
    set guioptions-=e " Do not use a gui tab bar
    set guioptions+=c " user console like dialogs instead of GUI ones
    set guioptions-=m " user console like dialogs instead of GUI ones

    set lines=30 columns=100

endif

" Set the default colorscheme {{{

" Solarized {{{
Bundle 'altercation/vim-colors-solarized'
" Solarized bg switcher.
call togglebg#map('<F5>')
set bg=dark
set t_Co=256
let g:solarized_termcolors = 256
let g:solarized_termtrans = 1
let g:solarized_bold = 0
let g:solarized_italic = 0
let g:solarized_visibility = 'low'
let g:solarized_hitrail = 1
" }}}

" Tomorrow {{{
Bundle 'chriskempson/vim-tomorrow-theme'
" }}}

" Colors are not as good with these 256 thingies turned on.
colorscheme Tomorrow-Night
" }}}

" Enable File type detection.
" Also load indent files, to automatically do language-dependent indenting.
filetype plugin indent on

if has('autocmd')

    " Place the autocmds in a group.
    augroup shvim

    " Clear the autocmd's in the group.
    autocmd!

    " When editing a file, jump to the last known cursor position. Don't do it
    " when the position is invalid or when inside an event handler (happens when
    " dropping a file on gvim).
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     exe 'normal! g`"' |
        \ endif

    augroup END

endif

" indenting settings
set tabstop=4 " Displayed size of a tab character
" set softtabstop=4 " No. of spaces that make up a single indent
set smarttab
set shiftwidth=4 " No. of display space to be shifted per indent
set expandtab " Use spaces instead of tabs to indent
set shiftround " Round off the indent to *n* shiftwidths

" Show a vertical line warning of my long lines.
set textwidth=80
set colorcolumn=+1

" Make horizontal scrolling less horrible (via @stevelosh).
set sidescroll=1
set sidescrolloff=10

" Turn on syntax highlighting.
syntax on

" Make backspace act sane (i.e., non vi-compatible)
set backspace=indent,eol,start

" Enable mouse.
set mouse=a

" Hide abandoned buffers in order to not lose undo history.
set hidden

" Ignore case in searches for everything (Tab completion, C-x completions etc.).
set ignorecase

" Highlight last used search term.
if s:first_time
    set hlsearch
endif

" Show the matched character for an annoyingly long time period.
set showmatch
set matchtime=3

" Do incremental search.
set incsearch

" Blank lines piss me off when doing block selections!
set virtualedit=block

" No swap files please.
set noswapfile

" Store undofiles (persistent-undo).
set undodir=$LAWN_TMP/undo//,.
set undofile

" Lines to save from command line history.
set history=1000

" Disable word-wrap.
set nowrap

" Keep cursor on current column for certain jump commands.
set nostartofline

" Enable line numbers.
set number

" Show the cursor position all the time.
set ruler

" Super thin cursor in insert mode.
set guicursor=i-ci:ver10

" Highlight the cursor line.
set cursorline

" Minimum dimensions for window with focus.
set winheight=20
set winwidth=80

" Set the cursor changes in terminal.
" TODO: Find escape codes to change cursor style.
if &term =~ "xterm"
    " let &t_SI = "\<Esc>]12;purple\x7"
    " let &t_EI = "\<Esc>]12;blue\x7"
endif

" Display partial/incomplete commands.
set showcmd

" Show a mini-menu when using Tab-completions for commands.
set wildmenu

" Ignore these files when autocompleting.
set wildignore=*.pyc,*.o,*.class,*/.hg/*,*/.svn/*,*/.git/*

" Ignore case in filename completions and then some.
set wildignorecase

" Use / instead of \ in file name completion among other places.
set shellslash

" Omni completion function.
set omnifunc=syntaxcomplete#Complete

" Characters used to show invisibles with `list`. Other possible tab chars: ›‣⁍
set listchars=tab:›\ ,trail:∙
set list

" Use blowfish encryption by default.
if has('&cryptmethod')
    set cryptmethod=blowfish
endif

" Enable concealing everywhere.
if has('conceal')

    set concealcursor=nvic

    " Toggle concealing.
    nnoremap <silent> <F3> :call <SID>ToggleConceal(2)<CR>
    fun! <SID>ToggleConceal(value)
        exe 'set conceallevel=' . (&conceallevel == 0 ? a:value : 0)
    endfun

endif

" Always show status line.
set laststatus=2

" Show the title line.
set title

" Highlight VCS conflict markers.
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" }}}

" Mappings {{{

" Leaders ahoy!
let mapleader = ','
let maplocalleader = '\'

" Quickly edit my vimrc.
nnoremap <Leader>ev :e $MYVIMRC<CR>

" Maps that make more sense.
nnoremap Y y$
nnoremap <silent> Q :wqa<CR>
nnoremap j gj
nnoremap gj j
nnoremap k gk
nnoremap gk k

" Maps that apply on line can use the `.` key.
nnoremap d. dd
nnoremap y. yy
nnoremap c. cc
nnoremap g. gg

" Fix linewise visual selection of various text objects.
nnoremap v. V
nnoremap v.it vitVkoj
nnoremap v.at vatV
nnoremap v.ab vabV
nnoremap v.aB vaBV

" I don't need the default functionality of `-` and `_`.
nnoremap - ;
nnoremap _ ,
vnoremap - ;
vnoremap _ ,

" A use for the unused Arrow keys :).
nnoremap <Up> <C-y>
nnoremap <Down> <C-e>
vnoremap <Up> <C-y>
vnoremap <Down> <C-e>
inoremap <Up> <C-o><C-y>
inoremap <Down> <C-o><C-e>
inoremap <Left> <C-d>
inoremap <Right> <C-t>

" Make ' act as ` which has the saner behavior.
nnoremap ' `
vnoremap ' `

" ` is easier to reach than <C-w>.
nnoremap ` <C-w>
nnoremap `` <C-w><C-w>

" My remapping of <C-^>. If there is no alternate file, then switch to next
" file. Use <Space> to toggle to alternate buffer.
nnoremap <silent> <Leader><Space> :exe 'silent! b' . (expand('#') == '' ? 'n' : ' #')<CR>

" Easier way to go to normal mode.
vnoremap <silent> <C-k> <ESC>
snoremap <silent> <C-k> <ESC>
inoremap <silent> <C-k> <ESC>

" Insert digraphs (<C-k> taken above).
inoremap <silent> <C-y> <C-k>

" Easy backspacing.
inoremap <silent> <C-o> <C-w>
cnoremap <C-o> <C-w>

" Navigating history on command line intelligently.
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" Save all modified buffers.
nnoremap <silent> <CR> :call <SID>SuperEnterKey()<CR>
vnoremap <silent> <CR> :call <SID>SuperEnterKey()<CR>
fun! <SID>SuperEnterKey()
    if &buftype == 'quickfix'
        .cc
    elseif expand('%') != ''
        wa
    endif
endfun

" Map to change current directory to the directory of the current buffer.
nnoremap cd :cd %:p:h<CR>:pwd<CR>

" Easy mapping to show only the current window. Or a map to Zoom toggling if
" ZoomWin plugin is available.
nnoremap <F9> <C-w>o

" Turn off hlsearch temporarily.
nnoremap <silent> <Leader>h :noh<CR>

" More convenient to go to command mode.
nnoremap <Space> :
vnoremap <Space> :

" Repeating keys is not as awesome.
nnoremap <> <<
nnoremap >< >>

" Use `U` for redo. I never understood its default functionality anyway.
nnoremap U <C-r>

" F1 is goddamn close to <ESC>. I don't want to see help with F1.
noremap <F1> <Esc>
inoremap <F1> <Esc>

" Paragraph jumping. Slightly flaky.
nnoremap <C-j> }j^
nnoremap <C-k> k{j^

" Open a Quickfix window for the last search.
nnoremap <silent> <Leader>/ :execute 'vimgrep /' . @/ . '/g %'<CR>:copen<CR>

" Ack for the last search.
nnoremap <silent> <Leader>? :execute "Ack! '" .
            \ substitute(substitute(substitute(@/, "\\\\<", "\\\\b", ""),
            \ "\\\\>", "\\\\b", ""), "\\\\v", "", "") . "'"<CR>

" * and # to work in visual mode, but search for the selected text
" Source: http://got-ravings.blogspot.com/2008/07/vim-pr0n-visual-search-mappings.html
fun! s:VSetSearch()
  let temp=@@
  norm! gvy
  let @/='\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
  let @@=temp
endfunction

vnoremap <silent> * :<C-u>call <SID>VSetSearch()<CR>//<CR>
vnoremap <silent> # :<C-u>call <SID>VSetSearch()<CR>??<CR>

" Replace consecutive blank lines with a single blank line.
nnoremap <silent> <Leader>xx :call <SID>PurgeExtraBlankLines()<CR>
fun! <SID>PurgeExtraBlankLines()
    if getline('.') != ''
        return
    endif
    normal k
    while getline('.') == ''
        normal ddk
    endwhile
    normal jj
    while getline('.') == ''
        normal dd
    endwhile
    normal k
endfun

" Strip all trailing spaces in the whole file.
nnoremap <silent> <Leader>xt :call <SID>StripTrailingSpaces()<CR>
fun! <SID>StripTrailingSpaces()
    let _s = @/
    let l = line('.')
    let c = col('.')
    %s/\s\+$//e
    let @/ = _s
    call cursor(l, c)
endfun

" Show highlighting groups for word under cursor.
nnoremap <C-S-P> :call <SID>SynStack()<CR>
fun! <SID>SynStack()
    if !exists("*synstack")
        echo 'Nothing appropriate'
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfun

" Text object shortcuts.

" r for rectangle brackets.
onoremap ar a]
onoremap ir i]

" a for angle brackets.
onoremap aa a>
onoremap ia i>

" c for curly brackets.
onoremap ac a}
onoremap ic i}

" Act on the next occuring text-object in the current line.

fun! <SID>ObMapper(char, ...)
    let key = a:0 ? a:1 : a:char
    exe 'vnoremap <silent> in' . key . ' :<C-U>normal! f' . a:char . 'vi' . key . '<CR>'
    exe 'onoremap <silent> in' . key . ' :<C-U>normal! f' . a:char . 'vi' . key . '<CR>'
    exe 'vnoremap <silent> an' . key . ' :<C-U>normal! f' . a:char . 'va' . key . '<CR>'
    exe 'onoremap <silent> an' . key . ' :<C-U>normal! f' . a:char . 'va' . key . '<CR>'
endfun

" Next ().
call <SID>ObMapper('(', 'b')
call <SID>ObMapper('(')

" Next {}
call <SID>ObMapper('{', 'B')
call <SID>ObMapper('{', 'c')
call <SID>ObMapper('{')

" Next [].
call <SID>ObMapper('[', 'r')
call <SID>ObMapper('[')

" Next <>.
call <SID>ObMapper('<', 'a')
call <SID>ObMapper('<')

" Highlight word (Taken from sjl's vimrc).
nnoremap <silent> <Leader>ma :execute 'match InterestingWordA /\<<C-r><C-w>\>/'<CR>
nnoremap <silent> <Leader>ms :execute '2match InterestingWordS /\<<C-r><C-w>\>/'<CR>
nnoremap <silent> <Leader>md :execute '3match InterestingWordD /\<<C-r><C-w>\>/'<CR>
nnoremap <silent> <Leader>Ma :execute 'match'<CR>
nnoremap <silent> <Leader>Ms :execute '2match'<CR>
nnoremap <silent> <Leader>Md :execute '3match'<CR>
highlight InterestingWordA guifg=#000000 guibg=#FFA700
highlight InterestingWordS guifg=#000000 guibg=#53FF00
highlight InterestingWordD guifg=#000000 guibg=#FF74F8

" Insertion helpers, easier typing of some hard-to-get characters using `Alt`.
imap <A-j> (
imap <A-k> )

" }}}

" Custom Commands {{{

" A C command to do simple/complex calculations by evaluating the given
" expression as a python expression (with math module imported).
command! -nargs=+ C :py print <args>
py from math import *

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made. Only define it when not
" defined already.
command! DiffOrig vnew | set bt=nofile | read # | 0d_ | diffthis | wincmd p | diffthis

" Sudo write.
if executable('sudo') && executable('tee')
  command! W
        \ execute 'w !sudo tee % > /dev/null' |
        \ setlocal nomodified
endif

" }}}

" Filetype specific settings {{{

" Bash shell scripting {{{
let g:is_bash = 1
" }}}

" }}}

" Plugins {{{

" Commentary {{{
Bundle 'tpope/vim-commentary'
nmap <leader>cc <Plug>CommentaryLine
nmap <leader>c  <Plug>Commentary
xmap <leader>c  <Plug>Commentary
" }}}

" " Syntastic {{{
" Bundle 'scrooloose/syntastic'
" let g:syntastic_enable_signs = 1
" let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
" " }}}

" Command-T {{{
Bundle 'git://git.wincent.com/command-t.git'
let g:CommandTMatchWindowReverse = 1
nnoremap <Leader>f :CommandT<CR>
nnoremap <Leader>d :CommandTBuffer<CR>
nnoremap <Leader>F :CommandTFlush<CR>:CommandT<CR>
" }}}

" NerdTree {{{
Bundle 'scrooloose/nerdtree'
" Convenience map for toggling NerdTree window.
nnoremap <silent> <F4> :silent! IP nerdtree<CR>:NERDTreeToggle<CR>
" Set the location of bookmarks for nerdtree.
autocmd FileType nerdtree setlocal nolist
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
" }}}

" " UltiSnips {{{
" Bundle 'SirVer/ultisnips'
" let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
" let g:UltiSnipsExpandTrigger = '<Tab>'
" let g:UltiSnipsJumpForwardTrigger = '<Tab>'
" let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'
" " }}}

" Snipmate (garbas) {{{

" Dependencies {{{
Bundle "MarcWeber/vim-addon-mw-utils"

" tlib shit {{{
Bundle "tomtom/tlib_vim"
augroup tlib-shit
    au!
    autocmd FileType tlibInputList setl nolist nocul nonu tw=0
augroup END
" }}}

" }}}

Bundle 'garbas/vim-snipmate'
Bundle "honza/snipmate-snippets"

" }}}

" VCSCommand {{{
Bundle 'vcscommand.vim'
let g:VCSCommandMapPrefix = '<Leader>v'
" }}}

" vim-pad {{{
Bundle 'fmoralesc/vim-pad'
let g:pad_dir = '~/Dropbox/pad'
let g:pad_window_height = 10
let g:pad_highlighting_variant = 1
let g:pad_use_default_mappings = 0
nmap <silent> <Leader>l <Plug>ListPads
nmap <silent> <Leader>a <Plug>OpenPad
nmap <silent> <Leader>s <Plug>SearchPads
" }}}

" VimClojure {{{
Bundle 'VimClojure'
" Colorful matching parentheses.
let vimclojure#ParenRainbow = 1
" Special indenting rules for def* and with-* forms.
let vimclojure#FuzzyIndent = 1
" Je wanty le nailgun.
" let vimclojure#WantNailgun = 1
" let vimclojure#NailgunClient = $VIMFILES . '/ng-client/ng'
" let vimclojure#SplitPos = 'bottom'
" }}}

" Gundo {{{
Bundle 'sjl/gundo.vim'
" Toggle.
nnoremap <F10> :GundoToggle<CR>
" }}}

" Vimroom awesomeness {{{
Bundle 'git@github.com:sharat87/vimroom.git'
let s:vimroom_active = 0
fun! <SID>VimroomLoad()
    IP vimroom
    VimroomToggle
    if !s:vimroom_active
        " Activate.
        let s:vimroom_active = 1
        setlocal nolist
        let s:vimroom_save_ls = &ls
        set ls=0
        let s:vimroom_save_go = &go
        set go-=l
        set go-=L
        set go-=r
        set go-=R
        set go-=b
        set go-=h
        set go-=m
    else
        " Deactivate.
        let s:vimroom_active = 0
        let &ls = s:vimroom_save_ls
        let &go = s:vimroom_save_go
    endif
endfun
nnoremap <Leader>V :nunmap <Leader>V\|call <SID>VimroomLoad()<CR>
" }}}

" Gist interaction plugin {{{
Bundle 'mattn/gist-vim'
Bundle 'mattn/webapi-vim'
" }}}

" Powerline status {{{
Bundle 'Lokaltog/vim-powerline'
let g:Powerline_symbols = 'fancy'
" }}}

" File type supporters {{{
Bundle 'groenewege/vim-less'
Bundle 'kchmck/vim-coffee-script'
Bundle 'pangloss/vim-javascript'
Bundle 'tpope/vim-markdown'
Bundle 'jnwhiteh/vim-golang'
" }}}

" Syntax checkers {{{

" Python syntax checking with pyflakes {{{
Bundle 'kevinw/pyflakes-vim'
" }}}

" Javscript syntax checking with jshint {{{
Bundle 'wookiehangover/jshint.vim'
" }}}

" }}}

" Text objects {{{
Bundle 'kana/vim-textobj-user'
Bundle 'kana/vim-textobj-entire'
Bundle 'michaeljsmith/vim-indent-object'
" }}}

" Functionality plugins {{{
Bundle 'AndrewRadev/linediff.vim'
Bundle 'bkad/CamelCaseMotion'
Bundle 'chrisbra/CheckAttach'
Bundle 'godlygeek/tabular'
Bundle 'mileszs/ack.vim'
Bundle 'sjl/clam.vim'
Bundle 'sjl/strftimedammit.vim'
Bundle 'tpope/vim-abolish'
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-unimpaired'
Bundle 'ZoomWin'
Bundle 'matchit.zip'
Bundle 'pythoncomplete'
Bundle 'pythondo'
Bundle 'ciaranm/detectindent'
" }}}

" Color schemes {{{
Bundle 'noahfrederick/Hemisu'
" }}}

" }}}

" {{{ Fix for Vundle's changes to &rtp not loading the `ftdetect` scripts.
filetype off
filetype on
" }}}

" Miscellaneous {{{

" Source evim.vim if running as evim.
if v:progname =~? "evim"
    source $VIMFILES/evim.vim
endif

" }}}
