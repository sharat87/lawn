" Author: Shrikant Sharat Kandula <shrikantsharat.k@gmail.com>
" Used On: (G)Vim 7.4 on Linux and Windows
" Vim: set ft=vim fdm=marker :

" Helpers {{{

" Find out if we are on windows.
let s:iswin = has('win32') || has('win64')

" Define the VIMFILES directory, if not already done.
if !exists('$VIMFILES')
    let $VIMFILES = s:iswin ? 'C:/tools/Vim/vimfiles' : $HOME . '/lawn/vim'
endif

" Define my lawn's temp directory.
if !exists('$LAWN_TMP')
    let $LAWN_TMP = $HOME . '/lawn/tmp'
endif

" Load Neobundle.
if has('vim_starting')
    set rtp+=$VIMFILES/bundles/neobundle.vim
endif
call neobundle#rc($VIMFILES . '/bundles/')
" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

" }}}

" Options {{{

if has('gui_running') && has('vim_starting')
    exe 'set guifont=' . escape(s:iswin ? 'Consolas:h14:cANSI' : 'Monaco 14', ' ')
    set go+=b " Enable horizontal scrollbar
    set go+=c " User console like dialogs instead of GUI ones
    set go-=T go-=e go-=m " Remove toolbar, tab bar and menubar
endif

" Colorschemes
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'chriskempson/vim-tomorrow-theme'
NeoBundle 'morhetz/gruvbox'
if has('vim_starting')
    set t_Co=256 bg=dark
    colorscheme gruvbox
endif

" Load a vimrc from current directory.
set secure exrc

" Enable File type specific goodies.
filetype plugin indent on

" When editing a file, jump to the last known cursor position.
au BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \     exe 'normal! g`"' |
            \ endif

" Indenting settings.
set smarttab expandtab tabstop=4 shiftwidth=4 shiftround

" Path used by the `:find` command.
set path=.,**

" Show a vertical line warning of my long lines.
set textwidth=80 colorcolumn=+1

" Make horizontal scrolling less horrible (via @stevelosh).
set sidescroll=1 sidescrolloff=10

" Turn on syntax highlighting.
syntax on

" Make backspace work everywhere.
set backspace=indent,eol,start

" Enable mouse.
set mouse=ar

" Hide abandoned buffers in order to not lose undo history.
set hidden

" Ignore case in searches for everything (Tab completion, C-x completions etc.).
set ignorecase

" Highlight last used search term.
if has('vim_starting')
    set hlsearch
endif

" Do incremental search.
set incsearch

" Show the matched character for an annoyingly long time period.
set showmatch matchtime=3

" File name chars for file name completion.
set isfname-=\=

" Blank lines piss me off when doing block selections!
set virtualedit=block

" No swap files, no backup and no magic atomic saving.
set nobackup nowritebackup noswapfile

" Store undofiles (persistent-undo).
set undofile undodir=$LAWN_TMP/undo//,.

" Lines to save from command line history.
set history=9000

" Disable word-wrap.
set nowrap

" Keep cursor on current column for certain jump commands.
set nostartofline

" Enable line numbers.
set number relativenumber

" Super thin cursor in insert mode.
set guicursor=i-ci:ver5

" Highlight the cursor line.
set cursorline

" Minimum dimensions for window with focus.
" set winheight=20
set winwidth=80

" " Set the cursor changes in terminal.
" " TODO: Find escape codes to change cursor style.
" if &term =~ "xterm"
"     let &t_si = "\<esc>]12;purple\x7"
"     let &t_EI = "\<Esc>]12;blue\x7"
" endif
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" Display partial/incomplete commands.
set showcmd

" Show a mini-menu when using Tab-completions for commands.
set wildmenu

" Ignore these files when autocompleting.
set wildignore+=*.pyc,*.class,*.pdf,*.png

" Ignore case in filename completions and then some.
set wildignorecase

" Use / instead of \ in file name completion among other places.
set shellslash

" Characters used to show invisibles with `list`.
" Other possible tab chars: ›‣⁍.
set listchars=tab:›\ ,trail:∙
set list

" Use blowfish encryption by default.
set cryptmethod=blowfish

" Enable concealing everywhere.
set concealcursor=nvic
nnoremap <silent> <F3> :exe 'set conceallevel=' . (&conceallevel == 0 ? 2 : 0)<CR>

" Use Ag for :grep command
if executable('ag')
    set grepprg=ag\ --nocolor\ --nogroup\ --column
    set grepformat=%f:%l:%c:%m
endif

" Manage the window title.
set title

" No status line please. There's an awesome ruler from `plugin/ruler.vim`.
set laststatus=0

" Tell vim to assume `/bin/sh` is bash.
let g:is_bash = 1

" }}}

" Mappings & Commands {{{

" Leaders ahoy!
let [mapleader, maplocalleader] = [',', '\']

" Quickly edit my vimrc. Using this path lets fugitive commands work.
nnoremap cv :e $VIMFILES/vimrc<CR>

" Maps that make more sense.
nnoremap Y y$
nnoremap Q :wqa<CR>
nnoremap j gj
nnoremap gj j
nnoremap k gk
nnoremap gk k

" Maps that apply on line can use the `.` key.
nnoremap d. dd
nnoremap y. yy
nnoremap c. cc
nnoremap g. gg
nnoremap v. V

" I have the comma as my <Leader> key, but need its default functionality.
nnoremap <Leader>; ,
vnoremap <Leader>; ,

" A use for the unused Arrow keys :).
nnoremap <Up> <C-y>
nnoremap <Down> <C-e>
vnoremap <Up> <C-y>
vnoremap <Down> <C-e>
inoremap <Up> <C-o><C-y>
inoremap <Down> <C-o><C-e>
inoremap <Left> <C-d>
inoremap <Right> <C-t>

" Make ' act as ` which has the saner behavior.
nnoremap ' `
vnoremap ' `

" ` is easier to hit than <C-w>.
nnoremap ` <C-w>
nnoremap `` <C-w><C-w>

" My remapping of <C-^>. If there is no alternate file, then switch to next file.
nnoremap <silent> <BS> :exe 'silent! b' . (expand('#') == '' ? 'n' : '#')<CR>

" Easier way to go to normal mode.
vnoremap <silent> <C-k> <ESC>
inoremap <silent> <C-k> <ESC>

" Insert digraphs (<C-k> taken above).
inoremap <silent> <C-y> <C-k>

" Easy backspacing.
inoremap <silent> <C-o> <C-w>
cnoremap <C-o> <C-w>

" Navigating history on command line intelligently.
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" Some emacsy-ness on the command line.
cnoremap <C-a> <Home>

" Opening files
nnoremap <Leader>f :find *<Left>

" Switching buffers.
nnoremap <Leader>d :ls<CR>:b<Space>

" Run the current buffer appropriately.
let g:runners = {
            \ 'javascript': 'node "%"',
            \ 'python': 'python3 "%"',
            \ 'r': 'Rscript %',
            \ 'sh': 'bash "%"',
            \ 'vim': 'source "%"',
            \ }
nnoremap <silent> <Leader>r :exe (&ft == 'vim' ? '' : '!time ') . g:runners[&ft]<CR>

" Toggle light/dark colorscheme.
nnoremap <silent> <F5> :call <SID>ToggleBg()<CR>
fun! s:ToggleBg()
    let cname = g:colors_name
    exe 'set bg=' . (&bg == 'dark' ? 'light' : 'dark')
    if cname == 'Tomorrow-Night'
        colorscheme Tomorrow
    elseif cname == 'Tomorrow'
        colorscheme Tomorrow-Night
    endif
endfun

" Save all modified buffers.
nnoremap <silent> <CR> :call <SID>SuperEnterKey()<CR>
vnoremap <silent> <CR> :call <SID>SuperEnterKey()<CR>
fun! s:SuperEnterKey()
    exe &ft == 'qf' ? '.cc' : 'wa'
endfun

" Map to change current directory to the directory of the current buffer.
nnoremap cd :cd %:p:h \| pwd<CR>

" Turn off hlsearch temporarily.
nnoremap <silent> <Leader>h :noh<CR>

" More convenient to go to command mode.
nnoremap <Space> :
vnoremap <Space> :

" Use `U` for redo. I never understood its default functionality anyway.
nnoremap U <C-r>

" Open a Quickfix window for the last search.
nnoremap <silent> g/ :vimgrep /<C-r>// % \| copen<CR>

" Grepping
nnoremap <Leader>g :vimgrep // **/*<C-Left><Left><Left>
nnoremap <Leader>G :grep // **/*<C-Left><Left><Left>

" * and # to work in visual mode, but search for the selected text
" Source: http://got-ravings.blogspot.com/2008/07/vim-pr0n-visual-search-mappings.html
vnoremap <silent> * :<C-u>call <SID>VSetSearch()<CR>//<CR>
vnoremap <silent> # :<C-u>call <SID>VSetSearch()<CR>??<CR>
fun! s:VSetSearch()
  let temp = @@
  normal! gvy
  let @/ = '\V' . escape(@@, '\')
  let @@ = temp
endfun

" Strip all trailing spaces in the whole file.
nnoremap <silent> <Leader>xt :call <SID>StripTrailingSpaces()<CR>
fun! s:StripTrailingSpaces()
    let _s = @/
    let l = line('.')
    let c = col('.')
    %s/\s\+$//e
    let @/ = _s
    call cursor(l, c)
endfun

" Show highlighting groups for word under cursor.
nnoremap <C-p> :call <SID>SynStack()<CR>
fun! s:SynStack()
    echo join(map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")'))
endfun

" Text object shortcuts.
fun! s:TextObjectAlias(alias, pack)
    exe 'onoremap a' . a:alias . ' a' . a:pack[1]
    exe 'onoremap i' . a:alias . ' i' . a:pack[1]
    exe 'nnoremap va' . a:alias . ' va' . a:pack[1]
    exe 'nnoremap vi' . a:alias . ' vi' . a:pack[1]
    " The `\r` must be in double quotes here.
    let g:surround_{char2nr(a:alias)} = a:pack[0] . "\r" . a:pack[1]
endfun
call s:TextObjectAlias('r', '[]')
call s:TextObjectAlias('a', '<>')
call s:TextObjectAlias('c', '{}')

" Command to automatically :make current buffer on save.
au QuickFixCmdPost make cwindow
aug automakes | aug END
command! Automake call <SID>Automake()
fun! s:Automake()
    if exists('b:automake')
        au! automakes BufWritePost <buffer>
        unlet b:automake
    else
        au automakes BufWritePost <buffer> silent make!
        let b:automake = 1
    endif
endfun

" Load a command's output in a new tab.
" Adapted from: http://vim.wikia.com/wiki/Capture_ex_command_output
command! -nargs=+ -complete=command R call <SID>TabMessage(<q-args>)
fun! <SID>TabMessage(cmd)
    redir => output
    silent execute a:cmd
    redir END
    tabnew
    silent put=output
    0delete _
    set nomodifiable
endfun

" See diff with saved file.
command! DiffOrig vnew | set bt=nofile | r# | 0d_ | diffthis | wincmd p | diffthis

" }}}

" Plugins and their configs {{{

" Vinegar {{{
NeoBundle 'tpope/vim-vinegar'
" }}}

" Commentary {{{
NeoBundle 'tpope/vim-commentary'
nmap gs <Plug>CommentaryLine
" }}}

" " ctrlp {{{
" NeoBundle 'kien/ctrlp.vim'
" let g:ctrlp_map = '<Leader>f'
" nnoremap <Leader><Leader> :CtrlP<C-d>
" nnoremap <Leader>d :CtrlPBuffer<CR>
" nnoremap <Leader>l :CtrlPLine<CR>
" nnoremap <Leader>F :CtrlPClearCache<CR>
" let g:ctrlp_custom_ignore = '\v(tmp|__pycache__|node_modules)$'
" " }}}

" UltiSnips {{{
NeoBundle 'SirVer/ultisnips'
let g:UltiSnipsSnippetsDir = $VIMFILES . '/UltiSnips'
let g:UltiSnipsEditSplit = 'vertical'
let g:UltiSnipsExpandTrigger = '<Tab>'
let g:UltiSnipsListSnippets = '<C-Tab>'
let g:UltiSnipsJumpForwardTrigger = '<Tab>'
let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'
" }}}

" Autopairs {{{
NeoBundle 'jiangmiao/auto-pairs'
let g:AutoPairsCenterLine = 0
" }}}

" File type sauces {{{

" Additional file types {{{
NeoBundle 'alunny/pegjs-vim'
NeoBundle 'estin/htmljinja'
NeoBundle 'tpope/vim-markdown'
NeoBundle 'gkz/vim-ls'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'wavded/vim-stylus'
" }}}

" Web - HTML, CSS and JavaScript {{{
NeoBundle 'othree/html5.vim'
let g:html_exclude_tags = ['html', 'head', 'body'] " Exclude from indentation

NeoBundle 'pangloss/vim-javascript'

NeoBundle 'Valloric/MatchTagAlways'
let g:mta_filetypes = {'html': 1, 'xml': 1, 'htmljinja': 1}
" }}}

" }}}

" Text objects {{{
NeoBundle 'kana/vim-textobj-user'

NeoBundle 'kana/vim-textobj-entire'
NeoBundle 'michaeljsmith/vim-indent-object'

" Defines `ay` and `iy` for syntax regions.
NeoBundle 'kana/vim-textobj-syntax'

" Defines `a,` and `i,` for function arguments.
NeoBundle 'sgur/vim-textobj-parameter'

" TODO: Move custom text objects to a plugin script and add surround support.
" Next brackets in line {{{

fun! NextSurroundA(bracket)
    exe 'normal! f' . a:bracket
    let head_pos = getpos('.')
    normal! %
    let tail_pos = getpos('.')
    return ['v', head_pos, tail_pos]
endfun

fun! NextSurroundI(bracket)
    exe 'normal! f' . a:bracket . 'l'
    let head_pos = getpos('.')
    normal! h%h
    let tail_pos = getpos('.')
    return ['v', head_pos, tail_pos]
endfun

" Defines a function that calls NextSurroundA or NextSurroundI according to the
" a:type argument, passing it the a:bracket. The a:name is just included in the
" name of the newly defined function. Returnes the name of the new function.
fun! NextSurrounder(name, bracket, type)
    let fname = 'NextSurrounder' . a:name . a:type
    exe 'fun! ' . fname . "()\n" .
                \ 'return NextSurround' . a:type . "('" . a:bracket . "')\n" .
                \ 'endfun'
    return fname
endfun

call textobj#user#plugin('nexts', {
            \   'paren': {
            \     'select-a-function': NextSurrounder('paren', '(', 'A'),
            \     'select-a': 'anb',
            \     'select-i-function': NextSurrounder('paren', '(', 'I'),
            \     'select-i': 'inb',
            \   },
            \   'bracket': {
            \     'select-a-function': NextSurrounder('bracket', '[', 'A'),
            \     'select-a': 'anr',
            \     'select-i-function': NextSurrounder('bracket', '[', 'I'),
            \     'select-i': 'inr',
            \   },
            \   'brace': {
            \     'select-a-function': NextSurrounder('brace', '{', 'A'),
            \     'select-a': 'anc',
            \     'select-i-function': NextSurrounder('brace', '{', 'I'),
            \     'select-i': 'inc',
            \   },
            \   'angle': {
            \     'select-a-function': NextSurrounder('angle', '<', 'A'),
            \     'select-a': 'ana',
            \     'select-i-function': NextSurrounder('angle', '<', 'I'),
            \     'select-i': 'ina',
            \   },
            \ })

" }}}

" }}}

" Misc plugins {{{
NeoBundle 'bkad/CamelCaseMotion'
NeoBundle 'godlygeek/tabular'
NeoBundle 'matchit.zip'
NeoBundle 'tpope/vim-abolish'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'tpope/vim-eunuch'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-obsession'
NeoBundle 'tpope/vim-ragtag'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-unimpaired'
" }}}

" Fix for Neobundle's changes to &rtp not loading the `ftdetect` scripts.
filetype off
filetype on

" }}}
