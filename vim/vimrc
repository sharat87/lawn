" Author: Shrikant Sharat Kandula <shrikantsharat.k@gmail.com>
" Last Major Change: 24 Jul, 2010
" Used On: Ubuntu Karmic (9.10) and Ubuntu Lucid (10.04)
" Modeline: vim: set ft=vim et sts=4 ts=8 sw=4 :

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Load Pathogen bundles
call pathogen#runtime_append_all_bundles('bundle')
call pathogen#runtime_append_all_bundles('ft-bundle')
call pathogen#helptags()

let s:initial = exists('g:vimrc_done') ? 0 : 1
let g:vimrc_done = 1

set path=./**

if has('gui_running')

    if s:initial == 1
        set guifont=Monaco\ 12
        set window=26
    endif

    set guioptions+=b " enable horizontal scrollbar
    set guioptions-=T " remove toolbar
    set guioptions-=t " remove tearoff from menus
    " set guioptions+=c " user console like dialogs instead of GUI ones

    set lines=35 columns=120

    " set the default colorscheme
    colorscheme blackboard
else
    set bg=light
    colorscheme tango
endif

" My remapping of <C-^>. If there is no alternate file, then switch to next file.
" Original: VIM Tips wiki
nnoremap <silent> <C-^> :exe 'silent! b' . (expand('#') == '' ? 'n' : ' #')<CR>

" set backup only if not using version control
if has("vms")
    set nobackup
else
    set backup
endif

" Enable File type detection
" Also load indent files, to automatically do language-dependent indenting
filetype indent on
filetype plugin on

" Place the autocmds in a group
augroup vimrcEx

" Clear the autocmd's in the group
autocmd!

" FIXME: The following lines are ill-placed. They should not be in
" this file
autocmd FileType javascript setlocal tags=/home/sharat/.vim/jquery-doc-tags
autocmd FileType python setlocal cpt-=i
" autocmd FileType vimwiki setlocal et ts=8 sw=2 sts=2 list spell

autocmd BufRead,BufNewFile **/knolskape/**/* setlocal noet ts=4 sw=4 sts=0 list

" when editing a file, jump to the last known cursor position
" Don't do it when the position id invalid or when inside an event handler
" (happens when dropping a file on gvim)
autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \     exe 'normal! g`"' |
    \ endif

augroup END

" indenting settings
set tabstop=8 " Displayed size of a tab character
set softtabstop=4 " No. of spaces that make up a single indent
set shiftwidth=4 " No. of display space to be shifted to indent
set expandtab " Use spaces instead of tabs to indent

" allow backspace on all characters in insert mode
" set backspace=indent,eol,start

" turn on syntax highlighting
syntax on

set viminfo="!"

" Swap leader and `,`
nnoremap \ ,
let mapleader = ','

" enable mouse
set mouse=a

" Hide abandoned buffers in order to not lose undo history
set hidden

" Ignore case in searches for everything (Tab completion, C-x completions
" etc.)
set ignorecase

" highlight last used search term
set hlsearch

" do incremental search
set incsearch

" location where all the backups go
set backupdir=~/.vimbaks

" Keep swap files in one location
set directory=$HOME/.vim.swp//,.

" lines to save from command line history
set history=1000

" disable word-wrap
set nowrap

" Keep cursor on current column for certain jump commands
set nostartofline

" enable line numbers
set number

" show the cursor position all the time
set ruler

" display partial/incomplete commands
set showcmd

" Show a mini-menu when using Tab-completions for commands
set wildmenu

" Use / instead of \ in file name completion among other places
set shellslash

" omni completion function
set omnifunc=syntaxcomplete#Complete

" Characters used to show invisibles with `list`
" Other possible tab chars: ›‣⁍
set listchars=tab:›\ ,trail:∙
set list

" Mappings {{{

" Text object mappings
onoremap ar a[
onoremap ir i[
onoremap aa a<
onoremap ia i<
onoremap ac aB
onoremap ic iB

" Maps that make more sense in Vim, but are not default to maintain with vi
nnoremap Y y$

" Easier way to go to normal mode
inoremap <silent> <S-CR> <ESC>

" Map to change current directory to the directory of the current buffer
nnoremap cd :cd %:p:h<CR>:pwd<CR>

" Map in visual mode to duplicate selected stuff just below the selected stuff
vnoremap D y'>p

" Home key mapping
inoremap <Home> <C-o>^

" Save all modified buffers
nnoremap <silent> <CR> :wa<CR>

" Turn off hlsearch temporarily
nnoremap <silent> <F3> :noh<CR>

" More convinient to go to command mode
nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;

" }}}

" My status line rules!
set laststatus=2
set statusline=%f\ [%n%H%M%R%W]\ [%{&ff}]\ %y%=%b\ %l/%L\|%c%V\ %P

" My title line rules too!!
set title
"set titlestring=\{%{\ g:LAST_SESSION\ }\}+\ %m\ %f\ %h\ -\ GVIM

" Replace consecutive blank lines with a single blank line
nnoremap <silent> <Leader>xx :call <SID>PurgeExtraBlankLines()<CR>
fun! <SID>PurgeExtraBlankLines()
    if getline('.') != ''
        return
    endif
    normal k
    while getline('.') == ''
        normal ddk
    endwhile
    normal jj
    while getline('.') == ''
        normal dd
    endwhile
    normal k
endfun

nnoremap <silent> <Leader>xt :call StripTrailingSpaces()<CR>
fun! <SID>StripTrailingSpaces()
    let _s = @/
    let l = line('.')
    let c = col('.')
    %s/\s\+$//e
    let @/ = _s
    call cursor(l, c)
endfun

" Show highlighting groups for word under cursor
nnoremap <C-S-P> :call <SID>SynStack()<CR>
fun! <SID>SynStack()
    if !exists("*synstack")
        echo 'Nothing appropriate'
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfun


"
" Plug-in specific *stuff*
"

" Launch GotoFile
nnoremap <silent> <C-n> :GF<CR>

" Command-T launcher
nnoremap <silent> <Leader>f :CommandT<CR>

" Convenience map for toggling NerdTree window
nnoremap <silent> <F4> :NERDTreeToggle<CR>

" Set the location of bookmarks for nerdtree
let g:NERDTreeBookmarksFile = '$HOME/.vim/nerdtree-bookmarks'

" Themes for use with looks.vim
let g:looks = {}
let g:looks.mac = {
            \ ':colorscheme': "mac_classic",
            \ '&guifont': "Inconsolata\\ Medium\\ 15",
            \ '&cursorline': 1
            \ }
let g:looks.mac._map = 'm'
let g:looks.calmDark = { ":colorscheme": "lucius", "&guifont": "Consolas\\ 13", "&cursorline": 0 }
let g:looks.calmDark._map = 'd'

" Ragtag preferences
inoremap <M-o>       <Esc>o
inoremap <C-j>       <Down>
let g:ragtag_global_maps = 1

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
command! DiffOrig vnew | set bt=nofile | read # | 0d_ | diffthis | wincmd p | diffthis
