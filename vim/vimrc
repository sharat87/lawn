" Author: Shrikant Sharat Kandula <shrikantsharat.k@gmail.com>
" Used On: (G)Vim 7.3 and 7.2 on Ubuntu Natty(current), Maverick, Karmic and Lucid, and Windows 7
" Modeline: vim: set ft=vim et sts=4 ts=8 sw=4 fdm=marker :

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Utilities {{{

" Return the operating system we are running
fun! <SID>qui_os()
    if has("win16") || has("win32") || has("win64")
        return "win"
    endif
    return substitute(system('uname'), "\n", "", "")
endfun

" Define the VIMFILES directory, if not already done
if !exists('$VIMFILES')
    if s:qui_os() == 'win'
        let $VIMFILES = 'C:/tools/Vim/vimfiles'
    else
        let $VIMFILES = $HOME . '/.vim'
    endif
endif

" Define my lawn's temp directory
if !exists('$LAWN_TMP')
    let $LAWN_TMP = $HOME . '/lawn/tmp'
endif

" Is vimrc running for the first time. e.g., not run with `source`
let s:first_time = !exists('g:vimrc_done')
let g:vimrc_done = 1

" Load Pathogen bundles
set rtp+=$VIMFILES/bundle/vim-pathogen
call pathogen#infect()
call pathogen#infect('bundle-local')
call pathogen#helptags()
call ipi#inspect()

set path=./**

" }}}

" Settings {{{

if has('gui_running')

    if s:first_time

        if s:qui_os() == "win"
            set guifont=Consolas:h14:cANSI
        else
            set guifont=Inconsolata-g\ Medium\ 16
        endif

        set guioptions+=b " enable horizontal scrollbar
        set guioptions-=T " remove toolbar
        set guioptions-=t " remove tearoff from menus
        set guioptions-=e " Do not use a gui tab bar
        set guioptions+=c " user console like dialogs instead of GUI ones
        set guioptions-=m " user console like dialogs instead of GUI ones

        set lines=30 columns=100

    endif
endif

" set the default colorscheme
" Colors are not as good with these 256 thingies turned on
set t_Co=256
let g:solarized_termcolors = 256
let g:solarized_termtrans = 1
let g:solarized_bold = 0
let g:solarized_italic = 0
let g:solarized_visibility = 'low'
let g:solarized_hitrail = 1
set bg=dark
colorscheme solarized

" set backup only if not using version control
if has("vms")
    set nobackup
else
    set backup
endif

" Enable File type detection
" Also load indent files, to automatically do language-dependent indenting
filetype indent on
filetype plugin on

if has('autocmd')

    " Place the autocmds in a group
    augroup shvim

    " Clear the autocmd's in the group
    autocmd!

    " when editing a file, jump to the last known cursor position
    " Don't do it when the position id invalid or when inside an event handler
    " (happens when dropping a file on gvim)
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     exe 'normal! g`"' |
        \ endif

    augroup END

endif

" indenting settings
set tabstop=4 " Displayed size of a tab character
set softtabstop=4 " No. of spaces that make up a single indent
set shiftwidth=4 " No. of display space to be shifted per indent
set expandtab " Use spaces instead of tabs to indent
set shiftround " Round off the indent to *n* shiftwidths

" Make horizontal scrolling less horrible (via @stevelosh)
set sidescroll=1
set sidescrolloff=10

" turn on syntax highlighting
syntax on

" Make backspace act sane (i.e., non vi-compatible)
set backspace=indent,eol,start

" enable mouse
set mouse=a

" Hide abandoned buffers in order to not lose undo history
set hidden

" Ignore case in searches for everything (Tab completion, C-x completions
" etc.)
set ignorecase

" highlight last used search term
if s:first_time
    set hlsearch
endif

" Show the matched character for an annoyingly long time period
set showmatch
set matchtime=3

" do incremental search
set incsearch

" blank lines piss me off when doing block selections!
set virtualedit=block

" location where all the backups go
if s:qui_os() != "win"
    set backupdir=$LAWN_TMP/baks
endif

" Keep swap files in one location
set directory=$LAWN_TMP/swap//,.

" Store undofiles (persistent-undo)
set undodir=$LAWN_TMP/undo//,.
set undofile

" lines to save from command line history
set history=1000

" disable word-wrap
set nowrap

" Keep cursor on current column for certain jump commands
set nostartofline

" enable line numbers
" set number

" show the cursor position all the time
set ruler

" display partial/incomplete commands
set showcmd

" Show a mini-menu when using Tab-completions for commands
set wildmenu

" Ignore these files when autocompleting
set wildignore=*.pyc,*.o,*.class,*/.hg/*,*/.svn/*,*/.git/*

" Use / instead of \ in file name completion among other places
set shellslash

" omni completion function
set omnifunc=syntaxcomplete#Complete

" Characters used to show invisibles with `list`
" Other possible tab chars: ›‣⁍
set listchars=tab:›\ ,trail:∙
set list

" Use blowfish encryption by default
if has('&cryptmethod')
    set cryptmethod=blowfish
endif

" Enable concealing everywhere
if has('conceal')

    set concealcursor=nvic

    " Toggle concealing
    nnoremap <silent> <F3> :call <SID>ToggleConceal(2)<CR>
    fun! <SID>ToggleConceal(value)
        exe 'set conceallevel=' . (&conceallevel == 0 ? a:value : 0)
    endfun

endif

" My status line rules!
set laststatus=2
" set statusline=%f\ [%n%H%M%R%W]\ [%{&ff}]\ %y%=L%l/%L\ C%c%V\ =%b\ @%P

" My title line rules too!!
set title
"set titlestring=\{%{\ g:LAST_SESSION\ }\}+\ %m\ %f\ %h\ -\ GVIM

" Vim seems to be opening a new shell when run external commands,
" This is sourcing my env file again, and hence re-constructing my $PATH
" That means of course, my virtualenv is now lost, as the env adds my custom
" built python's bin unto the top of the PATH!
" The env file will see this variable and quit without changing anything.
" let $DONT_ENV = 'true'

" }}}

" Mappings {{{

" Maps that make more sense
nnoremap Y y$
nnoremap <silent> Q :wqa<CR>
nnoremap j gj
nnoremap gj j
nnoremap k gk
nnoremap gk k

" Maps that apply on line can use the `.` key
nnoremap d. dd
nnoremap y. yy
nnoremap c. cc
nnoremap g. gg

" Fix linewise visual selection of various text objects
nnoremap v. V
nnoremap v.it vitVkoj
nnoremap v.at vatV
nnoremap v.ab vabV
nnoremap v.aB vaBV

" Use `,` as the leader, and <Space> for the default functionality of `;` and
" `,`
nnoremap <Space> ;
nnoremap <S-Space> ,
vnoremap <Space> ;
vnoremap <S-Space> ,

" Leaders ahoy!
let mapleader = ','
let maplocalleader = '\'

" Open a new line without leaving insert mode
inoremap <silent> <S-CR> <C-[>

" A use for the unused Arrow keys :)
nnoremap <Up> <C-y>
nnoremap <Down> <C-e>
vnoremap <Up> <C-y>
vnoremap <Down> <C-e>
inoremap <Up> <C-o><C-y>
inoremap <Down> <C-o><C-e>
inoremap <Left> <C-d>
inoremap <Right> <C-t>

" Make ' act as ` which has the saner behavior
nnoremap ' `
vnoremap ' `

" ` is easier to reach than <C-w>
nnoremap ` <C-w>

" My remapping of <C-^>. If there is no alternate file, then switch to next file.
" Use <Space> to toggle to alternate buffer
nnoremap <silent> <Leader><Space> :exe 'silent! b' . (expand('#') == '' ? 'n' : ' #')<CR>

" Easier way to go to normal mode
vnoremap <silent> <C-k> <ESC>
inoremap <silent> <C-k> <ESC>
inoremap <ESC> <C-o>:echoerr 'Use C-k instead'<CR>
inoremap <silent> <C-y> <C-k>

" Backspacing
inoremap <silent> <C-o> <C-w>
cnoremap <silent> <C-o> <C-w>

" Save all modified buffers
nnoremap <silent> <CR> :call <SID>SuperEnterKey()<CR>
vnoremap <silent> <CR> :call <SID>SuperEnterKey()<CR>
fun! <SID>SuperEnterKey()
    if &buftype == 'quickfix'
        .cc
    elseif expand('%') != ''
        wa
    " elseif &modified
    "     echoerr "No filename"
    endif
endfun

" Map to change current directory to the directory of the current buffer
nnoremap cd :cd %:p:h<CR>:pwd<CR>

" Map in visual mode to duplicate selected stuff just below the selected stuff
vnoremap D y'>p

" Easy mapping to show only the current window.
" ... or a map to Zoom toggling if ZoomWin plugin is available
nnoremap <F9> <C-w>o

" Home key mapping
inoremap <Home> <C-o>^

" Turn off hlsearch temporarily
nnoremap <silent> <Leader>h :noh<CR>

" More convinient to go to command mode
nnoremap ; :
vnoremap ; :

" Repeating keys is not as awesome
nnoremap <> <<
nnoremap >< >>

" F1 is goddamn close to <ESC>. I don't want to see help with F1.
noremap <F1> <Nop>
inoremap <F1> <Nop>

" Scrolling
nnoremap <C-j> <C-d>
nnoremap <C-k> <C-u>

" Open a scratch pad with markdown
" Utility func.
fun! <SID>IsTabEmpty()

    " Remember which window we're in at the moment
    let initial_win_num = winnr()

    let win_count = 0
    " Add the length of the file name on to count:
    " this will be 0 if there is no file name
    windo let win_count += len(expand('%'))

    " Go back to the initial window
    exe "normal " . initial_win_num . ""

    " Check count
    if win_count == 0
        " Tab page is empty
        return 1
    else
        return 0
    endif

endfun
fun! s:OpenScratchPad(start_new)
    if !<SID>IsTabEmpty()
        silent tabnew
    endif
    e ~/.msgs
    se ft=markdown spell wrap nolist
    nnoremap <Leader>l ggO--<CR>Shrikant<CR><CR><ESC>100i-<ESC>o<ESC>ggO<ESC>O
    if a:start_new
        normal ,l
        startinsert
    endif
endfunction
nnoremap <Leader>d :call <SID>OpenScratchPad(1)<CR>
nnoremap <Leader>D :call <SID>OpenScratchPad(0)<CR>

" * and # to work in visual mode, but search for the selected text
" Source: http://got-ravings.blogspot.com/2008/07/vim-pr0n-visual-search-mappings.html
fun! s:VSetSearch()
  let temp=@@
  norm! gvy
  let @/='\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
  let @@=temp
endfunction

vnoremap <silent> * :<C-u>call <SID>VSetSearch()<CR>//<CR>
vnoremap <silent> # :<C-u>call <SID>VSetSearch()<CR>??<CR>

" Replace consecutive blank lines with a single blank line
nnoremap <silent> <Leader>xx :call <SID>PurgeExtraBlankLines()<CR>
fun! <SID>PurgeExtraBlankLines()
    if getline('.') != ''
        return
    endif
    normal k
    while getline('.') == ''
        normal ddk
    endwhile
    normal jj
    while getline('.') == ''
        normal dd
    endwhile
    normal k
endfun

" Strip all trailing spaces in the whole file
nnoremap <silent> <Leader>xt :call <SID>StripTrailingSpaces()<CR>
fun! <SID>StripTrailingSpaces()
    let _s = @/
    let l = line('.')
    let c = col('.')
    %s/\s\+$//e
    let @/ = _s
    call cursor(l, c)
endfun

" Show highlighting groups for word under cursor
nnoremap <C-S-P> :call <SID>SynStack()<CR>
fun! <SID>SynStack()
    if !exists("*synstack")
        echo 'Nothing appropriate'
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfun

" Text object shortcuts

" r for rectangle brackets
onoremap ar a]
onoremap ir i]

" a for angle brackets
onoremap aa a>
onoremap ia i>

" c for curly brackets
onoremap ac a}
onoremap ic i}

" Act on the next occuring text-object in the current line

fun! <SID>ObMapper(char, ...)
    let key = a:0 ? a:1 : a:char
    exe 'vnoremap <silent> in' . key . ' :<C-U>normal! f' . a:char . 'vi' . key . '<CR>'
    exe 'onoremap <silent> in' . key . ' :<C-U>normal! f' . a:char . 'vi' . key . '<CR>'
    exe 'vnoremap <silent> an' . key . ' :<C-U>normal! f' . a:char . 'va' . key . '<CR>'
    exe 'onoremap <silent> an' . key . ' :<C-U>normal! f' . a:char . 'va' . key . '<CR>'
endfun

" Next ()
call <SID>ObMapper('(', 'b')
call <SID>ObMapper('(')

" Next {}
call <SID>ObMapper('{', 'B')
call <SID>ObMapper('{', 'c')
call <SID>ObMapper('{')

" Next []
call <SID>ObMapper('[', 'r')
call <SID>ObMapper('[')

" Next <>
call <SID>ObMapper('<', 'a')
call <SID>ObMapper('<')

" Next ''
call <SID>ObMapper("'")

" Next ""
call <SID>ObMapper('"')

" }}}

" Custom Commands {{{

" A C command to do simple/complex calculations by evaluating the given
" expression as a python expression (with math module imported).
command! -nargs=+ C :py print <args>
py from math import *

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
command! DiffOrig vnew | set bt=nofile | read # | 0d_ | diffthis | wincmd p | diffthis

" Sudo write
if executable('sudo') && executable('tee')
  command! W
        \ execute 'w !sudo tee % > /dev/null' |
        \ setlocal nomodified
endif

" }}}

" Plugins {{{

" Solarized bg switcher
call togglebg#map('<F5>')

" Plugin options/utils/extensions/tails/appendices

" Commentary
nmap <leader>cc <Plug>CommentaryLine
nmap <leader>c  <Plug>Commentary
xmap <leader>c  <Plug>Commentary

" Syntastic preferences
let g:syntastic_enable_signs = 1
let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'

" PyRef options
let g:pyref_mapping = 'gK'

" CtrlP settings
let g:ctrlp_map = '<Leader>f'
let g:ctrlp_working_path_mode = 0
let g:ctrlp_match_window_reversed = 1
let g:ctrlp_root_markers = ['.hg', 'fabfile.py', 'ant.xml']
let g:ctrlp_prompt_mappings = {
  \ 'PrtSelectMove("j")':   ['<c-j>', '<down>', '<s-tab>'],
  \ 'PrtSelectMove("k")':   ['<c-k>', '<up>', '<tab>'],
  \ 'PrtHistory(-1)':       ['<c-n>'],
  \ 'PrtHistory(1)':        ['<c-p>'],
  \ 'ToggleFocus()':        ['<c-tab>'],
  \ }

" NerdTree
" Convenience map for toggling NerdTree window
nnoremap <silent> <F4> :silent! IP nerdtree<CR>:NERDTreeToggle<CR>
" Set the location of bookmarks for nerdtree
let g:NERDTreeBookmarksFile = '$HOME/.vim/nerdtree-bookmarks'
autocmd FileType nerdtree setlocal nolist
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" Map to open a session
nnoremap <Leader>e :SessionOpen<Space>

" UltiSnips preferences
let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
let g:UltiSnipsExpandTrigger = '<Tab>'
let g:UltiSnipsJumpForwardTrigger = '<Tab>'
let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'

" Themes for use with looks.vim
let g:looks = {}
let g:looks.mac = {
            \ ':colorscheme': 'mac_classic',
            \ '&guifont': 'Monaco 12',
            \ '&cursorline': 1
            \ }
let g:looks.mac._map = 'm'
let g:looks.calmDark = { ':colorscheme': 'lucius', '&guifont': 'Consolas 13', '&cursorline': 0 }
let g:looks.calmDark._map = 'd'
let g:looks.tasty = { ':colorscheme': 'tango', '&guifont': 'Droid Sans Mono 14', '&cursorline': 1 }
let g:looks.tasty._map = 't'
let g:looks.cped = {
            \ ':colorscheme': 'mac_classic',
            \ '&cursorline': 0
            \ }

" let g:classpathed_look = 'cped'

" Conque-shell options
let g:ConqueTerm_CWInsert = 1 " Use <C-W> in insert mode as if it were hit in normal mode
let g:ConqueTerm_TERM = 'vt100' " The terminal type Conque identifies itself as, to the shell
let g:ConqueTerm_Syntax = 'conque'

" VCSCommand preferences
let g:VCSCommandMapPrefix = '<Leader>v'

" vimwiki settings
let g:vimwiki_hl_cb_checked = 1
let g:vimwiki_menu = '&Plugin.Vim&wiki'
let g:vimwiki_use_mouse = 1
let g:vimwiki_browsers = ['/usr/bin/google-chrome']
let nested_syntaxes = { 'python': 'python' }
let g:vimwiki_list = [
    \ { 'path': '~/calypso/vnotes', 'nested_syntaxes': nested_syntaxes }
    \]

" vim-pad settings
let g:pad_dir = '~/pad'
let g:pad_window_height = 10
let g:pad_highlighting_variant = 1 " Looks good with solarized
let g:pad_use_default_mappings = 0
nmap <Leader>l <Plug>ListPads
nmap <Leader>a <Plug>OpenPad
nmap <Leader>s <Plug>SearchPads

" simplenote credentials
so ~/.simplenoterc

" VimClojure preferences
" Colorful matching parentheses
let vimclojure#ParenRainbow = 1
" Special indenting rules for def* and with-* forms
let vimclojure#FuzzyIndent = 1
" Je wanty le nailgun
" let vimclojure#WantNailgun = 1
" let vimclojure#NailgunClient = $VIMFILES . "/bundle/vimclojure/client/ng"

" Gundo Toggle
nnoremap <F10> :silent! IP gundo<CR>:GundoToggle<CR>

" Google scribe auto-turn on
autocmd filetype vimwiki,markdown,mail,svn,hgcommit,gitcommit
    \ setlocal completefunc=googlescribe#Complete

" TwitVim ahoy!
let g:twitvim_browser_cmd = 'firefox'
let g:twitvim_enable_python = 1
let g:twitvim_api_root = "https://api.twitter.com/1"
fun! <SID>TwitterLoad()
    " The vim instance becomes pretty useless as a text editor after this.
    nmap o <Plug>TwitvimLaunchURL
    nmap u <Plug>TwitvimGetUserInfo
    IP TwitVim
    FriendsTwitter
    wincmd k
    wincmd H
    setlocal winwidth=80
    setlocal wrap
    setlocal linebreak
    setlocal nolist
    nnoremap <buffer> <HOME> gg
    nnoremap <buffer> <END> G
endfun
command! TwitterLoad call <SID>TwitterLoad()

" Vimroom awesomeness
let s:vimroom_active = 0
fun! <SID>VimroomLoad()
    IP vimroom
    VimroomToggle
    if !s:vimroom_active
        " Activate
        let s:vimroom_active = 1
        setlocal nolist
        let s:vimroom_save_stl = &stl
        set stl=
        let s:vimroom_save_go = &go
        set go-=l
        set go-=L
        set go-=r
        set go-=R
        set go-=b
        set go-=h
    else
        " Deactivate
        let s:vimroom_active = 0
        let &stl = s:vimroom_save_stl
        let &go = s:vimroom_save_go
    endif
endfun
command! VimroomLoad call <SID>VimroomLoad()

" Quickrun settings
let g:quickrun_config = { '_': {} }

let g:quickrun_config.tcl = { 'command': 'tclsh' }

" let g:quickrun_config._.exec = 'time %c %s %a'
let g:quickrun_config._.runmode = 'async:vimproc'
let g:quickrun_config._.running_mark = '{RandomRunningVerb()}'
" A function that gives a random verb-y string to display when a program is
" running. Just for fun :)
fun! RandomRunningVerb()
    if !has('python')
        return ':-)'
    endif
    redir => verb
python <<EOPY
verbs = (
    'Calculating awesomeness',
    'Collecting unicorn blood',
    'Defining absurdity',
    'Locating the elixir of pure geniusness',
    'Destroying insane amounts of sanity',
    'Detecting behavioral patterns',
    'Digging with the dwarves',
    'Evaluating next generation gene pool',
    'Generating Like-able creatures',
    'Innovating ridiculousness',
    'Looking for the elves',
    'Obeying your wish, as my command',
    'Recalculating astronomy',
    'Running the marathon',
    'Swimming with the bytes',
)
from random import choice
print '%s...' % choice(verbs)
EOPY
    redir END
    return verb
endfun

" Source evim.vim if running as evim
if v:progname =~? "evim"
    source $VIMFILES/evim.vim
endif

" }}}
