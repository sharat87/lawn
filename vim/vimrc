" Author: Shrikant Sharat Kandula <shrikantsharat.k@gmail.com>
" Used On: (G)Vim 7.4 on Linux and Windows
" Modeline: vim: set ft=vim et sts=4 ts=8 sw=4 fdm=marker :

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Helpers {{{

" Find out if we are on windows.
let s:is_windows = has('win32') || has('win64')

" Define the VIMFILES directory, if not already done.
if !exists('$VIMFILES')
    let $VIMFILES = s:is_windows ? 'C:/tools/Vim/vimfiles' : $HOME . '/.vim'
endif

" Define my lawn's temp directory.
if !exists('$LAWN_TMP')
    let $LAWN_TMP = $HOME . '/lawn/tmp'
endif

" Load Neobundle.
if has('vim_starting')
    set rtp+=$VIMFILES/bundles/neobundle.vim
endif
call neobundle#rc($VIMFILES . '/bundles/')
" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

set path=.,./**,,

" }}}

" Options {{{

if has('gui_running') && has('vim_starting')

    exe 'set guifont=' . escape(s:is_windows ? 'Consolas:h14:cANSI' : 'Fira Mono 16', ' ')
    set lines=30 columns=84

    " Minial GUI please.
    set go+=b " Enable horizontal scrollbar
    set go+=c " User console like dialogs instead of GUI ones
    set go-=T go-=e go-=m " Remove toolbar, tab bar and menubar

endif

" Set the default colorscheme {{{

set t_Co=256

NeoBundle 'altercation/vim-colors-solarized'
let g:solarized_termcolors = 256
let g:solarized_termtrans = 1
let g:solarized_bold = 0
let g:solarized_italic = 0
let g:solarized_visibility = 'low'
let g:solarized_hitrail = 1

NeoBundle 'junegunn/seoul256.vim'
let g:seoul256_background = 235

NeoBundle 'noahfrederick/Hemisu'
NeoBundle 'chriskempson/vim-tomorrow-theme'
NeoBundle 'morhetz/gruvbox'

colorscheme seoul256

" }}}

" Load a vimrc from current directory.
set secure exrc

" Enable File type detection.
" Also load indent files, to automatically do language-dependent indenting.
filetype plugin indent on

" When editing a file, jump to the last known cursor position. Don't do it when
" the position is invalid or when inside an event handler (happens when dropping
" a file on gvim).
autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \     exe 'normal! g`"' |
            \ endif

" Indenting settings.
set smarttab expandtab tabstop=4 shiftwidth=4 shiftround

" Show a vertical line warning of my long lines.
set textwidth=80
" Adapted from http://stackoverflow.com/a/13731714/151048.
" let &colorcolumn = '+' . join(range(1, 900), ',+')
set colorcolumn=+1

" Make horizontal scrolling less horrible (via @stevelosh).
set sidescroll=1 sidescrolloff=10

" Turn on syntax highlighting.
syntax on

" Make backspace act sane (i.e., non vi-compatible).
set backspace=indent,eol,start

" Enable mouse.
set mouse=a

" Hide abandoned buffers in order to not lose undo history.
set hidden

" Ignore case in searches for everything (Tab completion, C-x completions etc.).
set ignorecase

" Highlight last used search term.
if has('vim_starting')
    set hlsearch
endif

" Show the matched character for an annoyingly long time period.
set showmatch matchtime=3

" Do incremental search.
set incsearch

" File name chars for file name completion.
set isfname-=\=

" Blank lines piss me off when doing block selections!
set virtualedit=block

" No swap files, no backup and no magic atomic saving. Let `inotifywait` work
" right.
set nobackup nowritebackup noswapfile

" Store undofiles (persistent-undo).
set undofile undodir=$LAWN_TMP/undo//,.

" Lines to save from command line history.
set history=9000

" Disable word-wrap.
set nowrap

" Keep cursor on current column for certain jump commands.
set nostartofline

" Enable line numbers.
set number relativenumber

" Super thin cursor in insert mode.
set guicursor=i-ci:ver5

" Highlight the cursor line.
set cursorline

" Minimum dimensions for window with focus.
" set winheight=20
set winwidth=80

" " Set the cursor changes in terminal.
" " TODO: Find escape codes to change cursor style.
" if &term =~ "xterm"
"     let &t_si = "\<esc>]12;purple\x7"
"     let &t_EI = "\<Esc>]12;blue\x7"
" endif
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" Display partial/incomplete commands.
set showcmd

" Show a mini-menu when using Tab-completions for commands.
set wildmenu

" Ignore these files when autocompleting.
set wildignore+=*.pyc,*.class,*.pdf,*.png

" Ignore case in filename completions and then some.
set wildignorecase

" Use / instead of \ in file name completion among other places.
set shellslash

" Omni completion function.
set omnifunc=syntaxcomplete#Complete

" Characters used to show invisibles with `list`.
" Other possible tab chars: ›‣⁍.
set listchars=tab:›\ ,trail:∙
set list

" Use blowfish encryption by default.
set cryptmethod=blowfish

" Enable concealing everywhere.
if has('conceal')
    set concealcursor=nvic
    " Toggle concealing.
    nnoremap <silent> <F3> :exe 'set conceallevel=' . (&conceallevel == 0 ? 2 : 0)<CR>
endif

" No status line please.
set laststatus=0

" Show me info in the ruler.
let s:ruler = '%40(%=' . join([
            \ '%#Error#%{MixedIndentMsg()}%*',
            \ '%#Error#%{TrailingSpaceMsg()}%*',
            \ '%#Error#%{EncodingMsg()}%*',
            \ '%m%f │ %{&ft} %l%*:%c %p%%%)',
            \ ])
exec 'set ruler rulerformat=' . escape(s:ruler, ' ')
fun! TrailingSpaceMsg()
    return search('\s$', 'nw') ? '[∙∙∙$]' : ''
endfun
fun! MixedIndentMsg()
    " Taken from vim-airline
    return search('\v(^\t+ +)|(^ +\t+)', 'nw') ? '[›∙∙∙]' : ''
endfun
fun! EncodingMsg()
    return &fenc != 'utf-8' && &fenc != '' ? '[' . &fenc . ']' : ''
endfun

" Manage the window title.
set title

" Use Ag for :grep command
if executable('ag')
    set grepprg=ag\ --nocolor\ --nogroup\ --column
    set grepformat=%f:%l:%c:%m
endif

" }}}

" Mappings {{{

" Leaders ahoy!
let mapleader = ','
let maplocalleader = '\'

" Quickly edit my vimrc.
nnoremap cv :e $MYVIMRC<CR>

" Maps that make more sense.
nnoremap Y y$
nnoremap Q :wqa<CR>
nnoremap j gj
nnoremap gj j
nnoremap k gk
nnoremap gk k

" Maps that apply on line can use the `.` key.
nnoremap d. dd
nnoremap y. yy
nnoremap c. cc
nnoremap g. gg
nnoremap v. V

" I don't need the default functionality of `-` and `_`.
nnoremap <Leader>; ,
vnoremap <Leader>; ,

" A use for the unused Arrow keys :).
nnoremap <Up> <C-y>
nnoremap <Down> <C-e>
vnoremap <Up> <C-y>
vnoremap <Down> <C-e>
inoremap <Up> <C-o><C-y>
inoremap <Down> <C-o><C-e>
inoremap <Left> <C-d>
inoremap <Right> <C-t>

" Make ' act as ` which has the saner behavior.
nnoremap ' `
vnoremap ' `

" ` is easier to reach than <C-w>.
nnoremap ` <C-w>
nnoremap `` <C-w><C-w>

" My remapping of <C-^>. If there is no alternate file, then switch to next file.
nnoremap <silent> <Leader><Space> :exe 'silent! b' . (expand('#') == '' ? 'n' : ' #')<CR>

" Easier way to go to normal mode.
vnoremap <silent> <C-k> <ESC>
inoremap <silent> <C-k> <ESC>

" Insert digraphs (<C-k> taken above).
inoremap <silent> <C-y> <C-k>

" Easy backspacing.
inoremap <silent> <C-o> <C-w>
cnoremap <C-o> <C-w>

" Navigating history on command line intelligently.
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" Toggle light/dark colorscheme.
nnoremap <silent> <F5> :call <SID>ToggleBg()<CR>
fun! <SID>ToggleBg()
    let cname = g:colors_name
    exe 'set bg=' . (&bg == 'dark' ? 'light' : 'dark')
    if cname == 'Tomorrow-Night'
        colorscheme Tomorrow
    elseif cname == 'Tomorrow'
        colorscheme Tomorrow-Night
    elseif cname == 'seoul256'
        colo seoul256-light
    elseif cname == 'seoul256-light'
        colo seoul256
    endif
endfun

" Save all modified buffers.
nnoremap <silent> <CR> :call <SID>SuperEnterKey()<CR>
vnoremap <silent> <CR> :call <SID>SuperEnterKey()<CR>
fun! <SID>SuperEnterKey()
    if &buftype == 'quickfix'
        .cc
    elseif expand('%') != ''
        wa
    endif
endfun

" Map to change current directory to the directory of the current buffer.
nnoremap cd :cd %:p:h<CR>:pwd<CR>

" Turn off hlsearch temporarily.
nnoremap <silent> <Leader>h :noh<CR>

" More convenient to go to command mode.
nnoremap <Space> :
vnoremap <Space> :

" Use `U` for redo. I never understood its default functionality anyway.
nnoremap U <C-r>

" Paragraph jumping. FIXME: Slightly flaky.
nnoremap <C-j> }j^
nnoremap <C-k> k{j^

" Open a Quickfix window for the last search.
nnoremap <silent> <Leader>/ :exe 'vimgrep /' . @/ . '/ %'<CR>:copen<CR>

" * and # to work in visual mode, but search for the selected text
" Source: http://got-ravings.blogspot.com/2008/07/vim-pr0n-visual-search-mappings.html
fun! s:VSetSearch()
  let temp=@@
  norm! gvy
  let @/='\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
  let @@=temp
endfun

vnoremap <silent> * :<C-u>call <SID>VSetSearch()<CR>//<CR>
vnoremap <silent> # :<C-u>call <SID>VSetSearch()<CR>??<CR>

" Strip all trailing spaces in the whole file.
nnoremap <silent> <Leader>xt :call <SID>StripTrailingSpaces()<CR>
fun! <SID>StripTrailingSpaces()
    let _s = @/
    let l = line('.')
    let c = col('.')
    %s/\s\+$//e
    let @/ = _s
    call cursor(l, c)
endfun

" Show highlighting groups for word under cursor.
nnoremap <C-P> :call <SID>SynStack()<CR>
fun! <SID>SynStack()
    if !exists("*synstack")
        echo 'Nothing appropriate'
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfun

" Text object shortcuts.

" r for rectangle brackets.
onoremap ar a]
onoremap ir i]
nnoremap var va]
nnoremap vir vi]

" a for angle brackets.
onoremap aa a>
onoremap ia i>

" c for curly brackets.
onoremap ac a}
onoremap ic i}
onoremap vac va}
onoremap vic vi}

" }}}

" Utility functions and custom commands {{{

" Command to automatically :make current buffer on save.
command! -bang Automake call <SID>Automake(<bang>)
fun! s:Automake(bang)
    aug automakes
        au BufWritePost <buffer> silent Make
    aug END
    if a:bang == '!'
        Make
    endif
endfun

" Command to create/edit a local ftplugin file.
command! -nargs=? -complete=customlist,<SID>FtpluginComplete OpenFtplugin
            \ exe 'edit ' . $VIMFILES . '/after/ftplugin/' .
            \ (strlen('<args>') > 0 ? '<args>' : &ft) . '.vim'
fun! s:FtpluginComplete(lead, line, pos)
    return map(glob($VIMFILES . '/after/ftplugin/' . a:lead . '*.vim', 1, 1),
                \ "substitute(v:val, '^.*/\\([^/]\\+\\)\\.vim', '\\1', '')")
endfun

" Command to create/edit a local compiler file.
command! -nargs=1 -complete=customlist,<SID>CompilerComplete
            \ OpenCompiler edit $VIMFILES/after/compiler/<args>.vim
fun! s:CompilerComplete(lead, line, pos)
    return map(glob($VIMFILES . '/after/compiler/' . a:lead . '*.vim', 1, 1),
                \ "substitute(v:val, '^.*/\\([^/]\\+\\)\\.vim', '\\1', '')")
endfun

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made. Only define it when not
" defined already.
command! DiffOrig vnew | set bt=nofile | read # | 0d_ | diffthis | wincmd p | diffthis

" }}}

" Filetype specific settings {{{

" Bash shell scripting {{{
let g:is_bash = 1
" }}}

" HTML {{{
let g:html_indent_tags = ''
let g:html_indent_autotags = 'html,head,body,li'
" }}}

" }}}

" Plugins and their configs {{{

" Netrw & Vinegar {{{
" Netrw is already available by default.
NeoBundle 'tpope/vim-vinegar'

let g:netrw_home = $LAWN_TMP

let g:netrw_sort_options = 'i'

" Switch between the four styles with the `i` key. See `:h netrw-i`.
let g:netrw_liststyle = 4

" }}}

" Commentary {{{
NeoBundle 'tpope/vim-commentary'
nmap gs <Plug>CommentaryLine
" }}}

" ctrlp {{{
NeoBundle 'kien/ctrlp.vim'
let g:ctrlp_map = '<Leader>f'
nnoremap <Leader>d :CtrlPBuffer<CR>
nnoremap <Leader>l :CtrlPLine<CR>
nnoremap <Leader>F :CtrlPClearCache<CR>
let g:ctrlp_custom_ignore = '\v(tmp|__pycache__|node_modules)$'
" }}}

" UltiSnips {{{
NeoBundle 'SirVer/ultisnips'
let g:UltiSnipsSnippetsDir = $VIMFILES . '/UltiSnips'
let g:UltiSnipsEditSplit = 'vertical'
let g:UltiSnipsExpandTrigger = '<Tab>'
let g:UltiSnipsListSnippets = '<C-Tab>'
let g:UltiSnipsJumpForwardTrigger = '<Tab>'
let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'
" }}}

" Dispatch {{{
NeoBundle 'tpope/vim-dispatch'
aug dispatches
    au!
aug END
" }}}

" " Quickrun.vim (thinca) (replaced by vim-dispatch) {{{
" " TODO: Set `makeprg` for filetypes and get rid of this plugin?
" NeoBundle 'thinca/vim-quickrun'
" let g:quickrun_config = {
"             \ 'javascript': { 'command': 'node' },
"             \ 'python': { 'command': 'python3' },
"             \ }
" " }}}

" File type sauces {{{

" Additional file types {{{
NeoBundle 'alunny/pegjs-vim'
NeoBundle 'derekwyatt/vim-scala'
NeoBundle 'estin/htmljinja'
NeoBundle 'jnwhiteh/vim-golang'
NeoBundle 'tpope/vim-markdown'
NeoBundle 'wlangstroth/vim-racket'
" }}}

" Web - HTML, CSS and JavaScript {{{
NeoBundle 'othree/html5.vim'
NeoBundle 'indenthtml.vim'
NeoBundle 'hail2u/vim-css3-syntax'
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'leafgarland/typescript-vim'
NeoBundle 'gkz/vim-ls'
NeoBundle 'wavded/vim-stylus'
" }}}

" Haskell {{{

" Indentation.
NeoBundle 'indenthaskell.vim'
let g:haskell_indent_if = 2
let g:haskell_indent_case = 2

" Type and info about identifier under cursor.
NeoBundle 'bitc/vim-hdevtools'
au FileType haskell nnoremap <buffer> K :HdevtoolsType<CR>
au FileType haskell nnoremap <buffer> <silent> <C-S-K> :HdevtoolsClear<CR>

" }}}

" Clojure {{{
NeoBundle 'VimClojure'
" Colorful matching parentheses.
let vimclojure#ParenRainbow = 1
" Special indenting rules for def* and with-* forms.
let vimclojure#FuzzyIndent = 1
" }}}

" }}}

" Text objects {{{
NeoBundle 'kana/vim-textobj-user'

NeoBundle 'kana/vim-textobj-entire'
NeoBundle 'michaeljsmith/vim-indent-object'

" Defines `ay` and `iy` for syntax regions.
NeoBundle 'kana/vim-textobj-syntax'

" Defines `a,` and `i,` for function arguments.
NeoBundle 'sgur/vim-textobj-parameter'

" Next brackets in line {{{

fun! NextSurroundA(bracket)
    exe 'normal! f' . a:bracket
    let head_pos = getpos('.')
    normal! %
    let tail_pos = getpos('.')
    return ['v', head_pos, tail_pos]
endfun

fun! NextSurroundI(bracket)
    exe 'normal! f' . a:bracket . 'l'
    let head_pos = getpos('.')
    normal! h%h
    let tail_pos = getpos('.')
    return ['v', head_pos, tail_pos]
endfun

" Defines a function that calls NextSurroundA or NextSurroundI according to the
" a:type argument, passing it the a:bracket. The a:name is just included in the
" name of the newly defined function. Returnes the name of the new function.
fun! NextSurrounder(name, bracket, type)
    let fname = 'NextSurrounder' . a:name . a:type
    exe 'fun! ' . fname . "()\n" .
                \ 'return NextSurround' . a:type . "('" . a:bracket . "')\n" .
                \ 'endfun'
    return fname
endfun

call textobj#user#plugin('nexts', {
            \   'paren': {
            \     'select-a-function': NextSurrounder('paren', '(', 'A'),
            \     'select-a': 'anb',
            \     'select-i-function': NextSurrounder('paren', '(', 'I'),
            \     'select-i': 'inb',
            \   },
            \   'bracket': {
            \     'select-a-function': NextSurrounder('bracket', '[', 'A'),
            \     'select-a': 'anr',
            \     'select-i-function': NextSurrounder('bracket', '[', 'I'),
            \     'select-i': 'inr',
            \   },
            \   'brace': {
            \     'select-a-function': NextSurrounder('brace', '{', 'A'),
            \     'select-a': 'anc',
            \     'select-i-function': NextSurrounder('brace', '{', 'I'),
            \     'select-i': 'inc',
            \   },
            \   'angle': {
            \     'select-a-function': NextSurrounder('angle', '<', 'A'),
            \     'select-a': 'ana',
            \     'select-i-function': NextSurrounder('angle', '<', 'I'),
            \     'select-i': 'ina',
            \   },
            \ })

" }}}

" }}}

" Misc plugins {{{
NeoBundle 'bkad/CamelCaseMotion'
NeoBundle 'godlygeek/tabular'
NeoBundle 'jiangmiao/auto-pairs'
NeoBundle 'matchit.zip'
NeoBundle 'sjl/gundo.vim'
NeoBundle 'tpope/vim-abolish'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'tpope/vim-eunuch'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-obsession'
NeoBundle 'tpope/vim-ragtag'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-unimpaired'
" }}}

" }}}

" Miscellaneous fixes {{{

" Fix for Neobundle's changes to &rtp not loading the `ftdetect` scripts.
filetype off
filetype on

" Put the ~/.vim directory as the first item in `&rtp`.
" This is so that ultisnips loads the snippets in the correct order.
let &rtp = $VIMFILES . ',' . substitute(&rtp, $VIMFILES . ',', '', '')

" }}}
